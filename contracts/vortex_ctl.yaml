name: vortex_ctl
version: 1

# Robot type for LeRobot dataset metadata
robot_type: vortex_ctl

# Recording parameters
rate_hz: 20  # This must be an integer
max_duration_s: 90.0

# Policy inference parameters # Generate 5 actions per inference (reasonable for 0.5Hz)
observations:
  - key: observation.images.front
    topic: /camera/front/image_raw
    type: sensor_msgs/msg/Image
    image:
      # bag_to_lerobot decodes to RGB and resizes here
      resize: [512, 512]
    align: {strategy: hold, stamp: header, tol_ms: 1500}
    qos: {reliability: best_effort, history: keep_last, depth: 10}

  # - key: observation.images.front.depth
  #   topic: /intel_realsense_r200_depth/depth/image_raw
  #   type: sensor_msgs/msg/Image
  #   image:
  #     resize: [512, 512]      
  #   align: {strategy: asof, stamp: header, tol_ms: 80}
  #   qos: {reliability: best_effort, history: keep_last, depth: 5}

  - key: observation.state
    topic: /joint_states
    type: sensor_msgs/msg/JointState
    selector:
      # Only the wheel joints matter for diff_drive control
      names: [position.virtual_lift_arm_joint, position.blade_pitch_joint, position.blade_roll_joint, position.blade_yaw_joint, velocity.virtual_lift_arm_joint, velocity.blade_pitch_joint, velocity.blade_roll_joint, velocity.blade_yaw_joint]
    align: {strategy: hold, stamp: header, tol_ms: 1500}
    qos: {reliability: best_effort, history: keep_last, depth: 50}

  - key: observation.state
    topic: /odom
    type: nav_msgs/msg/Odometry
    selector:
      names: [twist.twist.linear.x, twist.twist.linear.y, twist.twist.linear.z, twist.twist.angular.x, twist.twist.angular.y, twist.twist.angular.z]
    align: {strategy: hold, stamp: header, tol_ms: 1500}
    qos: {reliability: best_effort, history: keep_last, depth: 50}
  
  # - key: observation.state
  #   topic: /imu 
  #   type: sensor_msgs/msg/Imu
  #   selector:
  #     names: [twist.twist.linear.x, twist.twist.linear.y, twist.twist.linear.z, twist.twist.angular.x, twist.twist.angular.y, twist.twist.angular.z]
  #   align: {strategy: hold, stamp: header}
  #   qos: {reliability: best_effort, history: keep_last, depth: 50}

actions:
  - key: action
    publish:
      topic: /cmd_vel
      type: geometry_msgs/msg/Twist
      layout: flat
      qos: {reliability: best_effort, history: keep_last, depth: 10}
      strategy:
        mode: nearest  # 'fifo' | 'nearest' - nearest selects action closest to current time
        tolerance_ms: 500  
    selector:
      # For diff_drive, only linear.x (forward/back) and angular.z (rotation) matter
      names: [linear.x, angular.z]
    from_tensor:
      # Clamp linear.x and angular.z to reasonable diff_drive range
      clamp: [-2.0, 2.0]
    safety_behavior: zeros  # 'zeros' to send all zeros when stopped, 'hold' to maintain last command

  - key: action
    publish:
      topic: /pid_controller/reference
      type: control_msgs/msg/MultiDOFCommand
      qos: {reliability: best_effort, history: keep_last, depth: 10}
      strategy:
        mode: nearest  # 'fifo' | 'nearest' - nearest selects action closest to current time
        tolerance_ms: 500  
    selector:
      names: [values.virtual_lift_arm_joint, values.blade_pitch_joint, values.blade_roll_joint, values.blade_yaw_joint]

recording:
  storage: mcap